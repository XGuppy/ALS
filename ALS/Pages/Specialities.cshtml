@page
@model ALS.Pages.Specialities

@{
    Layout = "_Layout";
    ViewData["Title"] = "Специальности";
}
<table style="width: 100%" border="1">
    <thead>
    <tr>
    <td>Код</td>
    <td>Наименование специальности</td>
    <td>Действие</td>
    </thead>
    <tbody id="tbodyContent">
</table>

<button class="btn btn-info btn-lg" type="button" data-toggle="modal" data-target="#myModal">Добавить специальность</button>
<div id="myModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header"><h4 class="modal-title">Новая специальность</h4><button class="close" type="button" data-dismiss="modal">×</button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Create", "Groups", FormMethod.Post))
                {
                    @Html.Label("Код:\t")
                    @Html.TextBox("Code", null, new {@id = "newCode"})
                    @Html.Label("Наименование специальности:\t")
                    @Html.TextBox("Name", null, new {@id = "newName"})
                    <p><input type="button" class="btn btn-dark" value="Отправить" onclick="createSpec()" /></p>
                }
            </div>
            <div class="modal-footer"><button class="btn btn-default" type="button" data-dismiss="modal">Закрыть</button></div>
        </div>
    </div>
</div>

<div id="edit" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header"><h4 class="modal-title">Редактирование специальности</h4><button class="close" type="button" data-dismiss="modal">×</button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Create", "Groups", FormMethod.Post))
                {
                    @Html.Label("Код:\t")
                    @Html.TextBox("Code", null, new {@id = "EditCode"})
                    @Html.Label("Наименование специальности:\t")
                    @Html.TextBox("Name", null, new {@id = "EditName"})
                    <p><input type="button" class="btn btn-dark" value="Отправить" onclick="editGroup()" /></p>
                }
            </div>
            <div class="modal-footer"><button class="btn btn-default" type="button" data-dismiss="modal">Закрыть</button></div>
        </div>
    </div>
</div>


<script>
    let tokenKey = "accessToken";
    $.ajax(
        {
            type: 'GET',
            url: '/api/specialities/getall',
            beforeSend: (xhr) => 
            {
                let token = sessionStorage.getItem(tokenKey);
                xhr.setRequestHeader("Authorization", "Bearer " + token);
            },
            success: (specialities) =>
            {
                let tbdy = document.getElementById('tbodyContent');
                for (let spec of specialities)
                {
                    let tr = document.createElement('tr');
                    for(let prop in spec)
                    {
                        let td = document.createElement('td');
                        td.appendChild(document.createTextNode(spec[prop]));
                        tr.appendChild(td);
                    }
                    let td = document.createElement('td');
                    td.innerHTML = '<button style="margin-right: 5%" data-toggle="modal" onclick="editPrepareSpec(this)" data-target="#edit" class="btn btn-primary edit-item">Редактировать</button>' +
                     '<button onclick="removeSpec(this)" class="btn btn-danger remove-item">Удалить</button>';
                    tr.appendChild(td);
                    tbdy.appendChild(tr);
                }
            },
            error: (specialitiesFail) =>
            {
                document.body.innerHTML = '';
                alert('Нет доступа');
                history.go(-1);
            }
        }
    );
    
    function createSpec() {
              let spec = {
                           Code: $('#newCode').val(),
                           Name: $('#newName').val()
                           };
              $.ajax(
                  {
                      type: 'POST',
                      url: '/api/specialities/create',
                      contentType:  "application/json; charset=utf-8",
                      dataType: "json",
                      data: JSON.stringify(spec),
                      beforeSend: (xhr) =>
                      {
                           let token = sessionStorage.getItem(tokenKey);
                           xhr.setRequestHeader("Authorization", "Bearer " + token);
                      },
                      success: (s) =>
                      {
                          document.location.reload(true);
                      },
                      error: (response) =>
                      {
                          console.log(response);
                          alert('Не удалось добавить специальность');
                      }
                  }
                );
    }
      function removeSpec(obj) {
                    let code = $(obj).parent("td").prev("td").prev("td").text();
                    if(confirm("Вы точно хотите удалить эту специальность?"))
                    {
                        $.ajax(
                            {
                                type: 'POST',
                                url: '/api/specialities/delete',
                                beforeSend: (xhr) =>
                                {
                                     let token = sessionStorage.getItem(tokenKey);
                                     xhr.setRequestHeader("Authorization", "Bearer " + token);
                                     xhr.setRequestHeader("code", code)
                                },
                                success: (g) =>
                                {
                                    document.location.reload(true);
                                },
                                error: (response) =>
                                {
                                    console.log(response);
                                    alert('У данной специальности ещё есть учебные группы');
                                }
                            }
                          );
                    }
      }
      
      function editPrepareSpec(obj) {
                
                let code = $(obj).parent("td").prev("td").prev("td").text();
                
                let name = $(obj).parent("td").prev("td").text();
                
                $("#edit").find("input[id='EditName']").val(name);
                $("#edit").find("input[id='EditCode']").val(code);
      }
      
      function editGroup() {
             let spec = {
                        Code: $('#EditCode').val(),
                        Name: $('#EditName').val()
                        };
                   $.ajax(
                       {
                           type: 'POST',
                           url: '/api/specialities/update',
                           contentType:  "application/json; charset=utf-8",
                           dataType: "json",
                           data: JSON.stringify(spec),
                           beforeSend: (xhr) =>
                           {
                                let token = sessionStorage.getItem(tokenKey);
                                xhr.setRequestHeader("Authorization", "Bearer " + token);
                                xhr.setRequestHeader("code", spec.Code);
                           },
                           success: (s) =>
                           {
                               document.location.reload(true);
                           },
                           error: (response) =>
                           {
                               console.log(response);
                               alert('Не удалось обновить специальности (возможно за ней числятся учебные группы?)');
                           }
                       }
                     );   
      }
</script>