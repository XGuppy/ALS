@page
@model ALS.Pages.AssignVariant

@{
    Layout = "_Layout";
    ViewData["Title"] = "Просмотр результатов";
}
<h3>Результаты </h3>
<div style="margin-bottom: 1%">
    <table cellspacing="0" style="width: 300px;">
        <tr>
            <td><span>Дисциплина: </span><select onchange="getComboBoxData()" id="disciplineSelect"></select></td>
            <td><span>Лабораторная работа: </span><select onchange="CreateTableSolutions()" id="laboratoryWorkSelect"></select></td>
       </tr>
       <tr>
           <td><span>Группа: </span><select onchange="GroupComboUpdate()" id="groupSelect"></select></td>
           <td><span>Студент: </span><select onchange="CreateTableSolutions()" id="studentSelect"></select></td>
       </tr>
    </table>
</div>
<div id="solutionTable" class="container">
    <table style="width: 100%" class="table table-hover" border="1">
        <thead>
        <td>Время отправки решения</td>
        <td>Было ли скомпилированно</td>
        <td>Решение верно</td>
        <td>Исходный код</td>
        <td>Перейти к таблице тестовых прогонов</td>
        <td>Удалить решение</td>
        </thead>
        <tbody id="tbodyContentSolutions">
    </table>
</div>
<div id="testRunTable" class="container">
    <button class="btn btn-primary edit-item" onclick="CreateTableSolutions()">Вернуться к решениям</button>
    <table style="width: 100%" class="table table-hover" border="1">
        <thead>
        <td>Наименование теста</td>
        <td>Память</td>
        <td>Время выполнения</td>
        <td>Комментарий</td>
        <td>Успешность тестового прогона</td>
        </thead>
        <tbody id="tbodyContentTestRuns">
    </table>
</div>
<script>
let optionsTime = {
                    dateStyle: 'short',
                    timeStyle: 'short'
                };
const correct = "Да";
const error = "Нет";
    $.ajax(
          {
              type: 'GET',
              url: '/api/disciplines/getall',
              async: false,
              beforeSend: (xhr) => 
              {
              },
              success: (disciplines) =>
              {
                  let sel = $('#disciplineSelect');
                  
                        if(disciplines.length === 0)
                        {
                            alert('Вы не ведёте ни одной дисциплины');
                            history.go(-1);
                        }
                      for (let discipline of disciplines)
                      {
                          let opt = document.createElement('option');
                          opt.text = discipline.name;
                          opt.dataset.id = discipline.cipher;
                          sel.append(opt);
                      }
              },
              error: (awFail) =>
              {
                  document.body.innerHTML = '';
                  alert('Нет доступа');
                  history.go(-1);
              }
          }
    );
    getComboBoxData();
    CreateTableSolutions();
    
    
    function CreateTableSolutions() {
        let data = getData();
        let assignedVariant;
        let tableTestRuns = $('#testRunTable').css('display', 'none');
        tableTestRuns.innerHTML = "";
        let tableSolWithHeader = document.getElementById("solutionTable");
        tableSolWithHeader.style.display = "block";
        let tableSol = document.getElementById("tbodyContentSolutions");
        tableSol.innerHTML = "";
        $.ajax(
                {
                    type: 'GET',
                    url: '/api/assignedvariants/get',
                    async: false,
                    beforeSend: (xhr) => 
                    {
                        xhr.setRequestHeader("userId", data.idStudent);
                        xhr.setRequestHeader("laboratoryWorkId", data.idLw);
                    },
                    success: (aw) =>
                    {
                        assignedVariant = aw;
                    },
                    error: (awFail) =>
                    {
                        document.body.innerHTML = '';
                        alert('Нет доступа');
                        history.go(-1);
                    }
                }
        );
        if(assignedVariant === undefined)
        {
            alert("Не назначен вариант.\nВыберите другие параметры в списках");
            return;
        }
        $.ajax(
                {
                    type: 'GET',
                    url: '/api/solutions/getbyuser',
                    beforeSend: (xhr) => 
                    {
                        xhr.setRequestHeader("assignedVariantId", assignedVariant.assignedVariantId);
                    },
                    success: (solutions) =>
                    {
                        for (let sol of solutions)
                        {
                            let row = document.createElement("tr");
                            tableSol.appendChild(row);
                            let tdDateTime = document.createElement("td");
                            tdDateTime.innerText = new Date(sol.sendDate).toLocaleString('ru', optionsTime);
                            row.appendChild(tdDateTime);
                            let tdIsCompiled = document.createElement("td");
                            tdIsCompiled.innerText = getSymbol(sol.isCompile);
                            row.appendChild(tdIsCompiled);
                            let tdIsSolved = document.createElement("td");
                            tdIsSolved.innerText = getSymbol(sol.isSolved);
                            row.appendChild(tdIsSolved);
                            let tdSourceCode = document.createElement("td");
                            row.appendChild(tdSourceCode);
                            let btnSourceCode = document.createElement("button");
                            btnSourceCode.className = "btn btn-primary edit-item";
                            btnSourceCode.innerText = "Скачать";
                            btnSourceCode.addEventListener('click', function() {
                               DownloadSource(sol.solutionId);
                             });
                            tdSourceCode.appendChild(btnSourceCode);
                            
                            let tdViewTestRuns = document.createElement("td");
                            row.appendChild(tdViewTestRuns);
                            if(sol.isCompile)
                            {
                               let btnViewTestRuns = document.createElement("button");
                               btnViewTestRuns.className = "btn btn-primary edit-item";
                               btnViewTestRuns.innerText = "Открыть";
                               btnViewTestRuns.addEventListener('click', function() {
                                  CreateTableTestRuns(sol.solutionId);
                                });
                               tdViewTestRuns.appendChild(btnViewTestRuns);
                            }
                            else
                            {
                                tdViewTestRuns.innerText = "Отсутствуют";
                            }
                            let tdDeleteSolution = document.createElement("td");
                            row.appendChild(tdDeleteSolution);
                            let btnDeleteSolution = document.createElement("button");
                            btnDeleteSolution.className = "btn btn-danger remove-item";
                            btnDeleteSolution.innerText = "Удалить";
                            btnDeleteSolution.addEventListener('click', function() {
                               DeleteSolution(sol.solutionId);
                             });
                            tdDeleteSolution.appendChild(btnDeleteSolution);
                        }
                    },
                    error: (solutionsFail) =>
                    {
                        document.body.innerHTML = '';
                        alert('Нет доступа');
                        history.go(-1);
                    }
                }
        );            
    }
    
    function DownloadSource(solutionId) {
       window.open('/api/Results/GetCode?solutionId=' + solutionId);
    }
    
    function DeleteSolution(solutionId) {
      if (confirm("Вы точно хотите удалить это решение?")) {
          $.ajax(
              {
                  type: 'POST',
                  url: '/api/solutions/delete',
                  beforeSend: (xhr) => 
                  {
                      xhr.setRequestHeader("solutionId", solutionId);
                  },
                  success: (sol) =>
                  {
                      alert("Решение успешно удалено");
                      CreateTableSolutions();
                  },
                  error: (solFail) =>
                  {
                      alert(solFail.responseText);
                  }
              }
      );
      }
    }
    
    function CreateTableTestRuns(solutionId) {
      let tableSol = $('#solutionTable').css('display', 'none');
      tableSol.innerHTML = "";
      let tableTrWithHeader = document.getElementById("testRunTable");
      tableTrWithHeader.style.display = "block";
      let tableTestRuns = document.getElementById("tbodyContentTestRuns");
      tableTestRuns.innerHTML = "";
      $.ajax(
                {
                    type: 'GET',
                    url: '/api/testruns/get',
                    beforeSend: (xhr) => 
                    {
                        xhr.setRequestHeader("solutionId", solutionId);
                    },
                    success: (trs) =>
                    {
                        for (let tr of trs)
                        {
                            let row = document.createElement("tr");
                            tableTestRuns.appendChild(row);
                            let tdName = document.createElement("td");
                            tdName.innerText = tr.name;
                            row.appendChild(tdName);
                            let tdMemory = document.createElement("td");
                            tdMemory.innerText = tr.result.memory + " байт";
                            row.appendChild(tdMemory);
                            let tdTime = document.createElement("td");
                            tdTime.innerText = tr.result.time + " мс";
                            row.appendChild(tdTime);
                            let tdComment = document.createElement("td");
                            tdComment.innerText = tr.result.comment;
                            row.appendChild(tdComment);
                            let tdIsCorrect = document.createElement("td");
                            tdIsCorrect.innerText = getSymbol(tr.result.isCorrect);
                            row.appendChild(tdIsCorrect);
                        }
                    },
                    error: (trFail) =>
                    {
                        document.body.innerHTML = '';
                        alert('Нет доступа');
                        history.go(-1);
                    }
                }
        );
    }
    
    function getSymbol(mark) {
      if(mark)
      {
          return correct;
      }
      return error;
    }
    function getData() 
    {
      return { idStudent: $('#studentSelect option:selected')[0].dataset.id, idLw: $('#laboratoryWorkSelect option:selected')[0].dataset.id, }
    }
    
    function getAssignedVariantData(obj) {
        return {UserId: obj.parentNode.previousSibling.dataset.id, VariantId: obj.options[obj.options.selectedIndex].dataset.id};
    }
    
    function getComboBoxData()
    {
        let disciplineId = $('#disciplineSelect option:selected')[0].dataset.id;
        $.ajax(
            {
                type: 'GET',
                url: '/api/groups/getallbydisciplineid',
                async:false,
                beforeSend: (xhr) => 
                {
                    xhr.setRequestHeader("disciplineCipher", disciplineId);
                },
                success: (groups) =>
                {
                    let sel = $('#groupSelect');
                    sel.empty();
                    for (let group of groups)
                    {
                        let opt = document.createElement('option');
                        opt.text = group.name;
                        opt.dataset.id = group.groupId;
                        sel.append(opt);
                    }
                    
                },
                error: (groupsFail) =>
                {
                    document.body.innerHTML = '';
                    alert('Нет доступа');
                    history.go(-1);
                }
            }
        );
        
        $.ajax(
                    {
                        type: 'GET',
                        url: '/api/laboratoryworks/getallbydiscipline',
                        async:false,
                        beforeSend: (xhr) => 
                        {
                            xhr.setRequestHeader("disciplineCipher", disciplineId);
                        },
                        success: (laboratoryWorks) =>
                        {
                            let sel = $('#laboratoryWorkSelect');
                            sel.empty();
                            for (let lw of laboratoryWorks)
                            {
                                let opt = document.createElement('option');
                                opt.dataset.id = lw.laboratoryWorkId;
                                opt.text = lw.name;
                                sel.append(opt);
                            }
                        },
                        error: (labFail) =>
                        {
                            document.body.innerHTML = '';
                            alert('Нет доступа');
                            history.go(-1);
                        }
                    }
                );
                StudentsComboBox();
        
        }
        function StudentsComboBox() {
          $.ajax(
                          {
                              type: 'GET',
                              url: '/api/users/GetUsersByGroup',
                              async:false,
                              beforeSend: (xhr) => 
                              {
                                  let groupId = $('#groupSelect option:selected')[0].dataset.id;
                                  xhr.setRequestHeader("groupId", groupId);
                              },
                              success: (users) =>
                              {
                                  
                                  let sel = $('#studentSelect');
                                  sel.empty();
                                  for (let user of users)
                                  {
                                      let opt = document.createElement('option');
                                      opt.dataset.id = user.id;
                                      opt.text = user.name + " " + user.surname + " " + user.patronymic;
                                      sel.append(opt);
                                  }
                              },
                              error: (user) =>
                              {
                                  document.body.innerHTML = '';
                                  alert('Нет доступа');
                                  history.go(-1);
                              }
                          }
                      );
        }
        
        function GroupComboUpdate() {
          StudentsComboBox();
          CreateTableSolutions();
        }
        
</script>